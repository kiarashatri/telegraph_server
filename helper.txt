jwtObject (signed to: socket.data.user) = {
  user_id: string,
}

----------------------------------------------------------------------------------------------

 Middleware's : (middlewares.ts ) =>

  - 1.1 return `true` To continue connection
  - 1.2 return `false` To reject and disconnect client from server
  - 2.1 import function in middlewares.ts and add into middlewares array


----------------------------------------------------------------------------------------------


Listener's :

  - message:
    - message/get/all/byPagination: (userId: string | ObjectId, !page: number = 1) => {}
    - message/new: (data: IN_SOURCE_INTERFACE) => {status: string}

  - story:
    - story/photo/get: (ownerId: string | Types.ObjectId, storyId: string | Types.ObjectId) => {
          storyId: Types.ObjectId,
          base64Photo: string,
        }
    - story/delete: (storyId: string | Types.ObjectId) => {status: string}


  - tweet:
    - tweet/delete: (storyId: string | Types.ObjectId) => {status: string}
    - tweet/add: (tweetContext: IN_SOURCE_INTERFACE) => {status: string}
    - tweet/like/toggle: (tweetId: ObjectId) => {status: string}
    - tweet/comment/add: (tweetId, IN_SOURCE_INTERFACE, !replyTo: string | Types.ObjectId) => {status: string}
    - tweet/comment/get/byPagination: (tweetId: Types.ObjectId, page: number) => {IN_SOURCE_INTERFACE}
    - tweet/get/byPagination: (userId: ObjectId, page: number) => {status: IN_SOURCE_INTERFACE}

  - user: 
   - user/block/get/all: () => {status: string}    
   - user/block/toggle: (userId: ObjectId) => {status: string}    
   - user/follower/get/all: (userId: ObjectId) => {status: string}    
   - user/following/get/all: (userId: ObjectId) => {status: string}    
   - user/following/request/get/all: () => {status: string}    
   - user/profile/get: () => {status: string}    






Emit's:

  - user/follow/request/new

  ----------------------------------------------------------------------------------------------



    error handling:

      console.error("Emit error: message/unread/get/all",`User-id: ${socket.data.user.user_id}` , `Socket-id: ${socket.id}`, `Error: ${error}`);







  ----------------------------------------------------------------------------------------------


  db.users.insertOne({
    name: 'kia',
    family: 'atri',
    username: 'kiarashatri',
    email: 'kia@gmail.cm',
    phone: 91188301030,
    last_seen: null,
    register_time: null,
    email_confirmation: null,
    following: [ { id: 1, time_add: null },{ id: 2, time_add: null },{ id: 3, time_add: null } ],
    block: [ { id: 456, time_block: null } ],
    setting: null
  });

    const a2 = new message({
      from: socket.data.user.ObjectId,
      to: new Types.ObjectId(),
      context: {
        text: "hi this is test",
      },
    });

    await a2.save();


    await user.findByIdAndDelete("63021504584d11f17ccd739e");
    const a2 = new user({
      name: "john",
      family: "snow",
      hashPassword: "5joRzUcZu3OkKsFCjV5ydNgxYAWl+YbCeSL8uFJ2nC8=",
      username: "jhonsnow",
      email: "jhonsnow@email.com",
      photo: "base64Photohere",
      biography: "my jhonsnow bio here",
      phone: 91188301030,
      last_seen: new Date(),
      register_at: new Date(),
      email_confirmation: new Date(),
      following: [
        {
          id: new Types.ObjectId("62fc0c0c2b83bd50cb5fef05"),
          added_at: new Date(),
        },
        { id: new Types.ObjectId(), added_at: new Date() },
        { id: new Types.ObjectId(), added_at: new Date() },
      ],
      block: [{ id: new Types.ObjectId(), blocked_at: new Date() }],
      setting: {},
    });

    await a2.save();



        const d = sign(
      { user_id: "63021602091fa84d91c8e9bf" },
      "0684c60c14e870b7a16ad6f491cb896f232b46017a2b6c0261120bef5eba5100"
    );
    console.log(d);



     db.tweets.insertOne({
    owner: ObjectId("62fbb1a596ac46dda02af592"),
    likes: [ObjectId("63021602091fa84d91c8e9bf")],
    comments: [],
    context: 'im tweeting! brah',
    sent_at: ISODate("2022-08-17T17:15:37.718Z"),
  })