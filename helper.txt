jwtObject (signed to: socket.data.user) = {
  user_id: string,
}

----------------------------------------------------------------------------------------------

 Middleware's : (middlewares.ts ) =>

  - 1.1 return `true` To continue connection
  - 1.2 return `false` To reject and disconnect client from server
  - 2.1 import function in middlewares.ts and add into middlewares array


----------------------------------------------------------------------------------------------


Emit's :

  Server-Side:
    - Private:
      - allUnreadMsgFromServer: join to user_id => get in once after connection from the client
      - singleUnreadMsgFromServer: Send Just to user_id => single message when sender , send message
      - sendUserProfile: (emit name: sendUserProfileFromServer) => send name,family, username, user_id, photo, biography, last_seen
      - sendLastSeenFromServer: array of users last_seen status => [{userId: id, lastSeen:Date}]
      - sendAllFollowingStorysInfoFromServer run fist at start conn to user
      - sendStoryPhotoFromServer:gets( {ownerId, ObjectId} ) :  return { status: bool,id: storyModelRequest._id, image: storyModelRequest.image};

  Client-side:
    newMessageFromClient: arg => {
      to: user_id,
      reply_to?: message_id,
      context: { image: "img", text: "string"}
    }
    receiveUserProfile: arg: (userId of user we want) {
      based of server-side sendUserProfile emit: returns => name,family, username, user_id, photo, biography
    }
    requestLastSeen: (arg: array of userId) => emit a list of users that we want their last seen
  


  ----------------------------------------------------------------------------------------------


  db.users.insertOne({
    name: 'kia',
    family: 'atri',
    username: 'kiarashatri',
    email: 'kia@gmail.cm',
    phone: 91188301030,
    last_seen: null,
    register_time: null,
    email_confirmation: null,
    following: [ { id: 1, time_add: null },{ id: 2, time_add: null },{ id: 3, time_add: null } ],
    block: [ { id: 456, time_block: null } ],
    setting: null
  });



    const aa = new user({
    // _id: socket.data.user.ObjectId,
    name: "kia",
    family: "atri",
    hashPassword: "5joRzUcZu3OkKsFCjV5ydNgxYAWl+YbCeSL8uFJ2nC8=",
    username: "kiarashatri",
    email: "kia@gmail.cm",
    photo: 'base64Photohere',
    biography: 'my biography here',
    phone: 91188301030,
    last_seen: new Date(),
    register_time: new Date(),
    email_confirmation: new Date(),
    following: [
      { id: new Types.ObjectId(), time_add: new Date() },
      { id: new Types.ObjectId(), time_add: new Date() },
      { id: new Types.ObjectId(), time_add: new Date() },
    ],
    block: [{ id: new Types.ObjectId(), time_block: new Date() }],
    setting: {},
  });

  await aa.save();