jwtObject (signed to: socket.data.user) = {
  user_id: string,
}

----------------------------------------------------------------------------------------------

 Middleware's : (middlewares.ts ) =>

  - 1.1 return `true` To continue connection
  - 1.2 return `false` To reject and disconnect client from server
  - 2.1 import function in middlewares.ts and add into middlewares array


----------------------------------------------------------------------------------------------

Document DB Structure:

  users [
    {id: unique_id,
     name: string,
     family: string,
     username: string,
     email: string,
     phone: number,
     last_seen: time,
     register_time: time,
     email_confirmation: time,
     friends: [{id: user_id, time_add: time}],
     block: [{id: user_id, time_block: time}], 
     setting: {} }
  ]

  messages [
    {id: unique_id, from: user_id, to: user_id, reply_to: message_id|Null, context: { image?: img, text?: string}, sent_at: time, time_deliver: time|Null }
  ]

  tweets [
    {id: unique_id, owner: number, like: [user_id], comments: [{id: unique_id, owner: user_id, context: string, reply_to: tweet_comment_id|Null, time_sent: time}], context: string, time_sent: time }
  ]

  storys [
    {id: unique_id, owner: id, image: link, add_time: time }
  ]


      { from: "id_from_id", to: "id_to_id", reply_to: "id_msg_id", context: { image: "img", text: "string txt"}, sent_at: null|Date, seen_at: null|Date }



----------------------------------------------------------------------------------------------


Emit's :

  Server-Side:
    - Private:
      - allUnreadMsgFromServer : join to user_id => get in once after connection from the client

  Client-side:
    newMessageFromClient: arg => {
      to: user_id,
      reply_to?: message_id,
      context: { image: "img", text: "string"}
    }
  